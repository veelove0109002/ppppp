name: Build PassWall for iStoreOS

on:
  workflow_dispatch:
    inputs:
      target_arch:
        description: '目标架构'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - aarch64_cortex-a53
          - aarch64_generic
      build_option:
        description: '构建选项'
        required: true
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - full

permissions:
  contents: write

jobs:
  build:
    name: 构建 PassWall 安装包
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取日期
        id: date
        run: echo "date=$(date)" >> $GITHUB_OUTPUT

      - name: 准备目录
        run: |
          mkdir -p passwall-ipk
          mkdir -p artifact/installer

      - name: 下载 PassWall 包
        run: |
          # 映射架构名称
          if [ "${{ inputs.target_arch }}" == "x86_64" ]; then
            ARCH_MAP="x86_64"
          elif [ "${{ inputs.target_arch }}" == "aarch64_cortex-a53" ]; then
            ARCH_MAP="aarch64_cortex-a53"
          else
            ARCH_MAP="aarch64_generic"
          fi
          
          echo "目标架构: ${{ inputs.target_arch }}, 映射为: $ARCH_MAP"
          
          # 获取最新版本号
          LATEST_VERSION=$(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep "tag_name" | cut -d '"' -f 4)
          if [ -z "$LATEST_VERSION" ]; then
            LATEST_VERSION="25.8.26-1"
          fi
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "使用版本: $LATEST_VERSION"
          
          # 下载PassWall包
          echo "下载PassWall包..."
          PASSWALL_URLS=$(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep "browser_download_url.*luci.*passwall.*all.ipk" | cut -d '"' -f 4)
          
          if [ ! -z "$PASSWALL_URLS" ]; then
            echo "$PASSWALL_URLS" | while read url; do
              if [ ! -z "$url" ]; then
                filename=$(basename "$url")
                echo "下载: $filename"
                wget -O "passwall-ipk/$filename" "$url" || echo "下载 $filename 失败"
              fi
            done
          else
            echo "无法从API获取PassWall包链接，尝试下载压缩包..."
            wget -O passwall-ipk/passwall_packages.zip \
              "https://github.com/xiaorouji/openwrt-passwall/releases/download/$LATEST_VERSION/passwall_packages_ipk_${ARCH_MAP}.zip" || \
            wget -O passwall-ipk/passwall_packages.zip \
              "https://github.com/xiaorouji/openwrt-passwall/releases/download/$LATEST_VERSION/passwall_packages_ipk.zip"
            
            if [ -f passwall-ipk/passwall_packages.zip ] && [ -s passwall-ipk/passwall_packages.zip ]; then
              echo "下载压缩包成功，解压中..."
              unzip -o passwall-ipk/passwall_packages.zip -d passwall-ipk/
              rm -f passwall-ipk/passwall_packages.zip
            else
              echo "下载压缩包失败"
              exit 1
            fi
          fi
          
          # 下载依赖包
          echo "下载依赖包..."
          wget -O passwall-ipk/passwall-packages.zip \
            "https://github.com/xiaorouji/openwrt-passwall/releases/download/$LATEST_VERSION/passwall_packages_ipk_${ARCH_MAP}.zip" || true
          
          if [ -f passwall-ipk/passwall-packages.zip ] && [ -s passwall-ipk/passwall-packages.zip ]; then
            echo "下载依赖包压缩包成功，解压中..."
            unzip -o passwall-ipk/passwall-packages.zip -d passwall-ipk/
            rm -f passwall-ipk/passwall-packages.zip
          fi
          
          # 列出下载的文件
          echo "已下载的文件:"
          ls -la passwall-ipk/
          
          # 检查下载的文件数量和总大小
          FILE_COUNT=$(ls -1 passwall-ipk/*.ipk 2>/dev/null | wc -l)
          TOTAL_SIZE=$(du -sh passwall-ipk/ | cut -f1)
          echo "下载了 $FILE_COUNT 个IPK文件，总大小: $TOTAL_SIZE"

      - name: 创建安装包
        run: |
          # 创建安装脚本 - 使用echo逐行写入而不是heredoc
          echo '#!/bin/sh' > install_script.txt
          echo '# PassWall installer for iStoreOS' >> install_script.txt
          echo '' >> install_script.txt
          echo 'echo "开始安装 PassWall for iStoreOS..."' >> install_script.txt
          echo '' >> install_script.txt
          echo '# 检查IPK文件' >> install_script.txt
          echo 'if [ ! -d /tmp/passwall-ipk ]; then' >> install_script.txt
          echo '  echo "错误: 找不到IPK文件目录"' >> install_script.txt
          echo '  exit 1' >> install_script.txt
          echo 'fi' >> install_script.txt
          echo '' >> install_script.txt
          echo 'IPK_COUNT=$(ls -1 /tmp/passwall-ipk/*.ipk 2>/dev/null | wc -l)' >> install_script.txt
          echo 'if [ "$IPK_COUNT" -eq 0 ]; then' >> install_script.txt
          echo '  echo "错误: 找不到任何IPK文件"' >> install_script.txt
          echo '  exit 1' >> install_script.txt
          echo 'fi' >> install_script.txt
          echo '' >> install_script.txt
          echo 'echo "找到 $IPK_COUNT 个IPK文件"' >> install_script.txt
          echo '' >> install_script.txt
          echo '# 创建临时目录' >> install_script.txt
          echo 'mkdir -p /tmp/passwall-install' >> install_script.txt
          echo '' >> install_script.txt
          echo '# 安装依赖' >> install_script.txt
          echo 'echo "正在更新软件包列表..."' >> install_script.txt
          echo 'opkg update' >> install_script.txt
          echo '' >> install_script.txt
          echo 'echo "正在安装基本依赖..."' >> install_script.txt
          echo 'opkg install libuci-lua luci-compat luci-lib-jsonc' >> install_script.txt
          echo '' >> install_script.txt
          echo '# 安装PassWall及其依赖' >> install_script.txt
          echo 'echo "正在安装PassWall及其依赖..."' >> install_script.txt
          echo 'for ipk in /tmp/passwall-ipk/*.ipk; do' >> install_script.txt
          echo '  echo "安装: $(basename $ipk)"' >> install_script.txt
          echo '  opkg install "$ipk" || echo "警告: 安装 $(basename $ipk) 失败，继续安装其他包"' >> install_script.txt
          echo 'done' >> install_script.txt
          echo '' >> install_script.txt
          echo '# 重启必要服务（避免重启网络服务导致登录状态丢失）' >> install_script.txt
          echo 'echo "正在重启服务..."' >> install_script.txt
          echo '/etc/init.d/rpcd restart' >> install_script.txt
          echo '# 不重启网络服务，避免登录状态丢失' >> install_script.txt
          echo '# /etc/init.d/network restart' >> install_script.txt
          echo '' >> install_script.txt
          echo '# 清理' >> install_script.txt
          echo 'rm -rf /tmp/passwall-install' >> install_script.txt
          echo 'echo "PassWall 安装完成！请在LuCI界面中访问服务→PassWall"' >> install_script.txt

          # 复制到最终文件
          cp install_script.txt passwall-install.sh
          chmod +x passwall-install.sh
          
          # 创建tar包
          echo "创建tar包..."
          tar -czf passwall-package.tar.gz passwall-ipk passwall-install.sh
          TAR_SIZE=$(du -sh passwall-package.tar.gz | cut -f1)
          echo "tar包大小: $TAR_SIZE"
          
          # 创建自解压安装包 - 使用echo逐行写入而不是heredoc
          echo '#!/bin/sh' > installer_script.txt
          echo '# PassWall for iStoreOS 自解压安装包' >> installer_script.txt
          echo '# 由GitHub Actions自动构建' >> installer_script.txt
          echo '' >> installer_script.txt
          echo 'echo "正在解压PassWall安装包..."' >> installer_script.txt
          echo 'ARCHIVE=`awk '"'"'/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }'"'"' $0`' >> installer_script.txt
          echo 'tail -n+$ARCHIVE $0 | tar -xz -C /tmp' >> installer_script.txt
          echo 'echo "正在运行安装脚本..."' >> installer_script.txt
          echo '/tmp/passwall-install.sh' >> installer_script.txt
          echo 'exit 0' >> installer_script.txt
          echo '__ARCHIVE_BELOW__' >> installer_script.txt

          # 复制到最终文件
          cp installer_script.txt passwall-installer.run
          
          # 使用版本号命名安装包
          INSTALLER_FILENAME="passwall-installer-${{ inputs.target_arch }}-${{ env.LATEST_VERSION }}.run"
          cat passwall-installer.run > "$INSTALLER_FILENAME"
          cat passwall-package.tar.gz >> "$INSTALLER_FILENAME"
          chmod +x "$INSTALLER_FILENAME"
          
          # 检查生成的安装包大小
          INSTALLER_SIZE=$(du -sh "$INSTALLER_FILENAME" | cut -f1)
          echo "安装包大小: $INSTALLER_SIZE"
          
          cp "$INSTALLER_FILENAME" ./artifact/installer/
          
          # 创建版本信息文件
          echo "PassWall版本: ${{ env.LATEST_VERSION }}" > version.txt
          echo "构建时间: ${{ steps.date.outputs.date }}" >> version.txt
          echo "目标架构: ${{ inputs.target_arch }}" >> version.txt
          echo "GitHub Actions运行ID: ${{ github.run_id }}" >> version.txt
          echo "构建选项: ${{ inputs.build_option }}" >> version.txt
          cp version.txt ./artifact/installer/

      - name: 上传安装程序
        uses: actions/upload-artifact@v4
        with:
          name: passwall-installer-${{ inputs.target_arch }}
          path: ./artifact/installer/

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        with:
          tag_name: passwall-${{ inputs.target_arch }}-${{ env.LATEST_VERSION }}-${{ github.run_id }}
          name: PassWall ${{ env.LATEST_VERSION }} for iStoreOS (${{ inputs.target_arch }})
          files: |
            passwall-installer-${{ inputs.target_arch }}-${{ env.LATEST_VERSION }}.run
            version.txt
          body: |
            ## PassWall ${{ env.LATEST_VERSION }} for iStoreOS - ${{ inputs.target_arch }}
            
            PassWall版本: ${{ env.LATEST_VERSION }}
            构建时间: ${{ steps.date.outputs.date }}
            目标架构: ${{ inputs.target_arch }}
            GitHub Actions运行ID: ${{ github.run_id }}
            构建选项: ${{ inputs.build_option }}
            
            ### 安装方法
            
            1. 下载 `passwall-installer-${{ inputs.target_arch }}-${{ env.LATEST_VERSION }}.run` 文件到路由器
            2. 执行 `chmod +x passwall-installer-${{ inputs.target_arch }}-${{ env.LATEST_VERSION }}.run && ./passwall-installer-${{ inputs.target_arch }}-${{ env.LATEST_VERSION }}.run`
            3. 安装完成后，在LuCI界面中访问服务→PassWall
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}