name: Build PassWall for iStoreOS

on:
  workflow_dispatch:
    inputs:
      target_arch:
        description: '目标架构'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - aarch64_cortex-a53
          - aarch64_generic
      build_option:
        description: '构建选项'
        required: true
        default: 'standard'
        type: choice
        options:
          - minimal (基础组件)
          - standard (标准组件)
          - full (全部组件)
          - custom (自定义)

permissions:
  contents: write

jobs:
  build:
    name: 构建 PassWall 固件
    runs-on: ubuntu-22.04
    steps:
      - name: 空间清理和环境初始化
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q` || true
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android || true
          sudo -E apt-mark hold grub-efi-amd64-signed || true
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap* || true
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib \
            gettext git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev \
            libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full \
            patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools \
            subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload || true
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          echo "WORKDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          
          # 显示磁盘空间
          echo "初始磁盘空间:"
          df -h

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 释放磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: 缓存工具链和下载
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/istoreos/dl
            ${{ github.workspace }}/istoreos/build_dir/toolchain-*
          key: ${{ runner.os }}-${{ inputs.target_arch }}-toolchain-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.target_arch }}-toolchain-

      - name: 克隆 iStoreOS
        run: |
          git clone --depth=1 https://github.com/istoreos/istoreos.git
          cd istoreos
          echo "克隆完成，当前分支:"
          git branch -v
          echo "当前提交:"
          git log -1 --pretty=format:"%h - %an, %ar : %s"

      - name: 设置 feeds
        run: |
          cd istoreos
          echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git;main" >> feeds.conf.default
          echo "src-git passwall_luci https://github.com/xiaorouji/openwrt-passwall.git;main" >> feeds.conf.default
          
          echo "更新 feeds..."
          ./scripts/feeds update -a
          
          echo "安装 feeds..."
          ./scripts/feeds install -a
          
          echo "更新 passwall feeds..."
          ./scripts/feeds update passwall_packages passwall_luci
          
          echo "安装 passwall feeds..."
          ./scripts/feeds install -a -p passwall_packages
          ./scripts/feeds install -a -p passwall_luci
          
          echo "Feeds 配置完成"

      - name: 生成配置文件
        run: |
          cd istoreos
          
          # 基本配置
          if [ "${{ inputs.target_arch }}" == "x86_64" ]; then
            cat > .config <<EOF
            CONFIG_TARGET_x86=y
            CONFIG_TARGET_x86_64=y
            CONFIG_TARGET_x86_64_DEVICE_generic=y
          EOF
          elif [ "${{ inputs.target_arch }}" == "aarch64_cortex-a53" ]; then
            cat > .config <<EOF
            CONFIG_TARGET_mediatek=y
            CONFIG_TARGET_mediatek_mt7622=y
            CONFIG_TARGET_mediatek_mt7622_DEVICE_xiaomi_redmi-router-ax6s=y
          EOF
          else
            cat > .config <<EOF
            CONFIG_TARGET_mediatek=y
            CONFIG_TARGET_mediatek_filogic=y
            CONFIG_TARGET_mediatek_filogic_DEVICE_xiaomi_redmi-router-ax6000=y
          EOF
          fi
          
          # 添加工具链相关配置
          cat >> .config <<EOF
          CONFIG_DEVEL=y
          CONFIG_TOOLCHAINOPTS=y
          CONFIG_NEED_TOOLCHAIN=y
          CONFIG_NEED_LIBC=y
          CONFIG_NEED_LIBC_CHECK=y
          CONFIG_LIBC_USE_MUSL=y
          EOF
          
          # 添加PassWall基本配置
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-i18n-passwall-zh-cn=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Dns2socks=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-i18n-passwall-zh-cn=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Dns2socks=y
          EOF
          
          # 添加透明代理配置
          echo "CONFIG_PACKAGE_luci-app-passwall_Iptables_Transparent_Proxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_Nftables_Transparent_Proxy=y" >> .config
          
          # 根据构建选项添加组件
          if [[ "${{ inputs.build_option }}" == *"minimal"* ]]; then
            # 最小组件
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_SingBox=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y" >> .config
          elif [[ "${{ inputs.build_option }}" == *"standard"* ]]; then
            # 标准组件
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Dns2socks=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_SingBox=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y" >> .config
          elif [[ "${{ inputs.build_option }}" == *"full"* ]] || [[ "${{ inputs.build_option }}" == *"custom"* ]]; then
            # 全部组件
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Dns2socks=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_SingBox=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y" >> .config
            
            # 高级组件
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Geoview=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadow_TLS=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_tuic_client=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Geodata=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=y" >> .config
            
            # 服务端组件
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=y" >> .config
            echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=y" >> .config
          fi
          
          # 添加一些必要的编译选项
          cat >> .config <<EOF
          # 基本构建选项
          CONFIG_DEVEL=y
          CONFIG_TOOLCHAINOPTS=y
          CONFIG_CCACHE=y
          CONFIG_KERNEL_BUILD_USER="PassWall Builder"
          CONFIG_KERNEL_BUILD_DOMAIN="istoreos.com"
          EOF
          
          # 运行defconfig确保配置有效
          make defconfig

      - name: 下载源码
        run: |
          cd istoreos
          echo "开始下载源码..."
          make download -j16 || make download -j1 V=s
          echo "下载完成"

      - name: 编译工具链
        run: |
          cd istoreos
          echo "开始编译工具链..."
          make toolchain/install -j$(nproc) || make toolchain/install -j1 V=s
          
          echo "工具链目录内容:"
          ls -la staging_dir/toolchain-*/ || true
          ls -la staging_dir/toolchain-*/lib/ || true

      - name: 编译 PassWall
        id: compile
        run: |
          cd istoreos
          # 先尝试编译整个包
          echo "开始编译 PassWall..."
          
          # 先编译依赖
          echo "编译基础依赖..."
          make package/libs/toolchain/compile -j$(nproc) || make package/libs/toolchain/compile -j1 V=s || true
          make package/utils/lua/host-compile -j$(nproc) || make package/utils/lua/host-compile -j1 V=s || true
          
          # 尝试编译PassWall
          echo "编译 PassWall..."
          make package/feeds/passwall_luci/luci-app-passwall/compile -j$(nproc) || make package/feeds/passwall_luci/luci-app-passwall/compile -j1 V=s || true
          
          # 检查是否成功编译
          if find bin/packages -name "luci-app-passwall*.ipk" | grep -q .; then
            echo "编译成功，找到 PassWall IPK 文件"
            echo "compile_success=true" >> $GITHUB_OUTPUT
            # 列出编译的文件
            echo "编译的 PassWall 相关文件:"
            find bin/packages -name "*passwall*.ipk" -o -name "luci-app-passwall*.ipk"
          else
            echo "未找到编译后的 PassWall IPK 文件，将使用预编译包"
            echo "compile_success=false" >> $GITHUB_OUTPUT
          fi
          
          # 显示磁盘使用情况
          echo "======================="
          echo "编译后磁盘空间使用情况:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir || true
          du -h --max-depth=1 ./bin || true

      - name: 准备预编译包
        if: steps.compile.outputs.compile_success != 'true'
        run: |
          mkdir -p passwall-ipk
          
          # 直接从GitHub下载最新的PassWall资源
          echo "获取PassWall最新资源..."
          
          # 下载最新的PassWall IPK - 尝试多种方式
          echo "下载 PassWall IPK..."
          
          # 方法1: 直接从release assets下载
          ASSETS_URL=$(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep "browser_download_url.*luci-app-passwall.*all.ipk" | cut -d '"' -f 4)
          if [ ! -z "$ASSETS_URL" ]; then
            echo "找到资源URL: $ASSETS_URL"
            wget -O passwall-ipk/luci-app-passwall.ipk "$ASSETS_URL" && echo "下载成功!"
          else
            echo "无法从API获取资源URL"
          fi
          
          # 方法2: 如果方法1失败，尝试直接从仓库下载
          if [ ! -f passwall-ipk/luci-app-passwall.ipk ]; then
            echo "尝试从仓库直接下载..."
            wget -O passwall-ipk/luci-app-passwall.ipk \
              https://github.com/xiaorouji/openwrt-passwall/raw/main/luci-app-passwall/Makefile || \
            echo "无法从仓库下载"
          fi
          
          # 方法3: 如果前两种方法都失败，尝试从镜像站点下载
          if [ ! -f passwall-ipk/luci-app-passwall.ipk ] || [ ! -s passwall-ipk/luci-app-passwall.ipk ]; then
            echo "尝试从镜像站点下载..."
            wget -O passwall-ipk/luci-app-passwall.ipk \
              https://downloads.openwrt.org/snapshots/packages/x86_64/packages/luci-app-passwall_4.0-1_all.ipk || \
            echo "无法从镜像站点下载"
          fi
          
          # 下载依赖包 - 使用更可靠的方法
          echo "下载依赖包..."
          
          # 核心依赖列表
          dependencies=("chinadns-ng" "dns2socks" "ipt2socks" "microsocks" 
                       "shadowsocks-libev" "shadowsocksr-libev" "simple-obfs" 
                       "tcping" "trojan-plus" "v2ray-plugin" "xray-core")
          
          # 映射架构名称
          ARCH_MAP=""
          if [ "${{ inputs.target_arch }}" == "x86_64" ]; then
            ARCH_MAP="x86_64"
          elif [ "${{ inputs.target_arch }}" == "aarch64_cortex-a53" ]; then
            ARCH_MAP="aarch64_cortex-a53"
          else
            ARCH_MAP="aarch64_generic"
          fi
          
          # 从OpenWrt官方软件源下载
          echo "尝试从OpenWrt软件源下载依赖..."
          for dep in "${dependencies[@]}"; do
            echo "下载 $dep..."
            # 尝试从OpenWrt官方软件源下载
            wget -O passwall-ipk/${dep}.ipk \
              "https://downloads.openwrt.org/snapshots/packages/${ARCH_MAP}/packages/${dep}_*.ipk" || \
            wget -O passwall-ipk/${dep}.ipk \
              "https://downloads.openwrt.org/snapshots/packages/${ARCH_MAP}/base/${dep}_*.ipk" || \
            echo "无法从OpenWrt软件源下载 $dep，跳过"
          done
          
          # 尝试从GitHub获取依赖包资源URL
          echo "尝试从GitHub获取依赖包资源URL..."
          ASSETS_URLS=$(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall-packages/releases/latest | grep "browser_download_url.*\.ipk" | cut -d '"' -f 4)
          
          if [ ! -z "$ASSETS_URLS" ]; then
            echo "找到资源URL列表，开始下载..."
            echo "$ASSETS_URLS" | while read url; do
              if [[ "$url" == *"_all.ipk" ]] || [[ "$url" == *"_${ARCH_MAP}.ipk" ]]; then
                filename=$(basename "$url")
                echo "下载: $filename"
                wget -O "passwall-ipk/$filename" "$url" || echo "下载 $filename 失败"
              fi
            done
          else
            echo "无法从GitHub获取资源URL列表"
          fi
          
          # 列出下载的文件
          echo "已下载的文件:"
          ls -la passwall-ipk/
          
          # 如果没有成功下载任何包，创建一个简单的说明文件
          if [ ! "$(ls -A passwall-ipk/*.ipk 2>/dev/null)" ]; then
            echo "警告: 没有成功下载任何IPK包，创建说明文件..."
            
            # 创建一个说明文件
            cat > passwall-ipk/README.txt <<EOF
PassWall 安装说明

由于构建过程中无法下载预编译的IPK包，请按照以下步骤手动安装PassWall:

1. 访问 https://github.com/xiaorouji/openwrt-passwall/releases/latest 下载最新版本
2. 或者通过iStore应用商店安装PassWall

如有问题，请访问 https://github.com/xiaorouji/openwrt-passwall/issues
EOF
            
            # 创建一个简单的安装脚本
            cat > passwall-ipk/install.sh <<EOF
#!/bin/sh
echo "请通过iStore应用商店安装PassWall，或访问 https://github.com/xiaorouji/openwrt-passwall/releases/latest 下载最新版本"
EOF
            chmod +x passwall-ipk/install.sh
          else
            echo "成功下载了一些IPK包，继续创建安装包..."
          fi

      - name: 获取日期
        id: date
        run: echo "date=$(date)" >> $GITHUB_OUTPUT

      - name: 准备构建产物
        run: |
          # 创建产物目录
          mkdir -p ./artifact/package
          mkdir -p ./artifact/installer
          
          # 创建IPK目录
          mkdir -p passwall-ipk
          
          # 如果编译成功，复制编译的IPK文件
          if [ "${{ steps.compile.outputs.compile_success }}" == "true" ]; then
            echo "使用编译的IPK文件"
            find istoreos/bin/packages -name "luci-app-passwall*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "*passwall*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "chinadns-ng*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "dns2socks*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "ipt2socks*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "microsocks*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "shadowsocks*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "shadowsocksr*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "simple-obfs*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "tcping*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "trojan*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "v2ray*.ipk" -exec cp {} passwall-ipk/ \;
            find istoreos/bin/packages -name "xray*.ipk" -exec cp {} passwall-ipk/ \;
          fi
          
          # 复制所有IPK到产物目录
          cp -rf passwall-ipk/*.ipk ./artifact/package/ || true
          
          # 创建安装脚本
          cat > passwall-install.sh <<EOF
          #!/bin/sh
          # PassWall installer for iStoreOS
          
          echo "开始安装 PassWall for iStoreOS..."
          
          # 创建临时目录
          mkdir -p /tmp/passwall-install
          cd /tmp/passwall-install
          
          # 安装依赖
          echo "正在更新软件包列表..."
          opkg update
          
          echo "正在安装基本依赖..."
          opkg install libuci-lua luci-compat luci-lib-jsonc
          
          # 安装PassWall及其依赖
          echo "正在安装PassWall及其依赖..."
          cd /tmp
          opkg install /tmp/passwall-ipk/*.ipk
          
          # 重启网络和服务
          echo "正在重启服务..."
          /etc/init.d/rpcd restart
          /etc/init.d/network restart
          
          # 清理
          rm -rf /tmp/passwall-install
          echo "PassWall 安装完成！请在LuCI界面中访问服务→PassWall"
          EOF
          
          chmod +x passwall-install.sh
          
          # 创建tar包
          tar -czf passwall-package.tar.gz passwall-ipk passwall-install.sh
          
          # 创建自解压安装包
          cat > passwall-installer.run <<EOF
          #!/bin/sh
          # PassWall for iStoreOS 自解压安装包
          # 由GitHub Actions自动构建 - ${{ github.run_id }}
          # 构建时间: ${{ steps.date.outputs.date }}
          # 目标架构: ${{ inputs.target_arch }}
          
          echo "正在解压PassWall安装包..."
          ARCHIVE=\`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' \$0\`
          tail -n+\$ARCHIVE \$0 | tar -xz -C /tmp
          echo "正在运行安装脚本..."
          /tmp/passwall-install.sh
          exit 0
          __ARCHIVE_BELOW__
          EOF
          
          cat passwall-package.tar.gz >> passwall-installer.run
          chmod +x passwall-installer.run
          cp passwall-installer.run ./artifact/installer/
          
          # 创建版本信息文件
          echo "构建时间: ${{ steps.date.outputs.date }}" > version.txt
          echo "目标架构: ${{ inputs.target_arch }}" >> version.txt
          echo "GitHub Actions运行ID: ${{ github.run_id }}" >> version.txt
          echo "提交SHA: ${{ github.sha }}" >> version.txt
          echo "构建选项: ${{ inputs.build_option }}" >> version.txt
          cp version.txt ./artifact/installer/

      - name: 上传IPK包
        uses: actions/upload-artifact@v4
        with:
          name: passwall-ipk-${{ inputs.target_arch }}
          path: ./artifact/package/
          
      - name: 上传安装程序
        uses: actions/upload-artifact@v4
        with:
          name: passwall-installer-${{ inputs.target_arch }}
          path: ./artifact/installer/

      - name: 创建发布说明
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          ## PassWall for iStoreOS - ${{ inputs.target_arch }}
          
          构建时间: ${{ steps.date.outputs.date }}
          目标架构: ${{ inputs.target_arch }}
          GitHub Actions运行ID: ${{ github.run_id }}
          
          ### 构建选项
          - 构建配置: ${{ inputs.build_option }}
          
          ### 安装方法
          
          1. 下载 \`passwall-installer.run\` 文件到路由器
          2. 执行 \`chmod +x passwall-installer.run && ./passwall-installer.run\`
          3. 安装完成后，在LuCI界面中访问服务→PassWall
          EOF

      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: passwall-${{ inputs.target_arch }}-${{ github.run_id }}
          name: PassWall for iStoreOS (${{ inputs.target_arch }}) - Build ${{ github.run_id }}
          files: |
            passwall-installer.run
            version.txt
          draft: false
          prerelease: false
          generate_release_notes: true
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
